"use strict";
/* eslint-disable no-use-before-define, no-continue, arrow-parens */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cityTo = exports.cityFrom = exports.cityIn = void 0;
const utils_1 = require("./utils");
const gender_1 = require("./gender");
const inclineRules_1 = require("./inclineRules");
const incline_1 = require("./incline");
const cityRules_1 = require("./rules/cityRules");
(0, inclineRules_1.constantizeGenderInRules)(cityRules_1.cityRules);
function declineTo(name, wordCase, gender) {
    if (isFrozen(name, cityRules_1.frozenWords))
        return name;
    return name
        .split(/(\s|-)/g)
        .map((part, i, parts) => {
        if (isFrozenPart(part, i, parts))
            return part;
        const rule = (0, inclineRules_1.findRule)(part, gender_1.ANDROGYNOUS, cityRules_1.cityRules);
        if (rule) {
            return (0, inclineRules_1.applyRule)(rule, part, wordCase);
        }
        return (0, incline_1.inclineFirstname)(part, wordCase, gender) || part;
    })
        .join('');
}
/**
 * предложный, в каком городе живете/находитесь?
 */
function cityIn(name, gender) {
    return declineTo(name, inclineRules_1.PREPOSITIONAL, gender);
}
exports.cityIn = cityIn;
/**
 * родительный, из какого города приехали?
 */
function cityFrom(name, gender) {
    return declineTo(name, inclineRules_1.GENITIVE, gender);
}
exports.cityFrom = cityFrom;
/**
 * винительный, в какой город направляетесь?
 */
function cityTo(name) {
    if (!name)
        return name;
    return name
        .split(/(\s|-)/g)
        .map((part, i, parts) => {
        if (isFrozenPart(part, i, parts))
            return part;
        const partLower = part.toLowerCase();
        if ((0, utils_1.endsWith)(partLower, 'а')) {
            return (0, inclineRules_1.applyMod)(part, '-у');
        }
        else if ((0, utils_1.endsWith)(partLower, 'ая')) {
            return (0, inclineRules_1.applyMod)(part, '--ую');
        }
        else if ((0, utils_1.endsWith)(partLower, 'ия')) {
            return (0, inclineRules_1.applyMod)(part, '--ию');
        }
        else if ((0, utils_1.endsWith)(partLower, 'я')) {
            return (0, inclineRules_1.applyMod)(part, '-ю');
        }
        return part;
    })
        .join('');
}
exports.cityTo = cityTo;
function isFrozen(str, words) {
    const strLower = str.toLowerCase();
    for (let k = 0; k < words.length; k++) {
        if (words[k] === strLower) {
            return true;
        }
    }
    return false;
}
function isFrozenPart(part, i, parts) {
    if (parts.length > 1) {
        if (isFrozen(part, cityRules_1.frozenParts))
            return true;
        for (let k = 0; k < i; k++) {
            if (isFrozen(parts[k], cityRules_1.frozenPartsAfter))
                return true;
        }
    }
    return false;
}
//# sourceMappingURL=city.js.map