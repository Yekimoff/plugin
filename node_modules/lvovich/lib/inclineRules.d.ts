import type { GenderStrT, GenderConstT } from './gender';
export declare const NOMINATIVE = 1;
export declare const GENITIVE = 2;
export declare const DATIVE = 3;
export declare const ACCUSATIVE = 4;
export declare const INSTRUMENTAL = 5;
export declare const PREPOSITIONAL = 6;
export declare type DeclentionT = typeof NOMINATIVE | typeof GENITIVE | typeof DATIVE | typeof ACCUSATIVE | typeof INSTRUMENTAL | typeof PREPOSITIONAL;
export declare type DeclentionStrT = 'nominative' | 'genitive' | 'dative' | 'accusative' | 'instrumental' | 'prepositional' | DeclentionT;
export declare type DeclentionModsT = [string, string, string, string, string] | [];
export declare type DeclensionRuleT = {
    gender?: GenderStrT | GenderConstT | null;
    test: string[];
    mods: DeclentionModsT;
    tags?: string[];
};
export declare type DeclensionRuleSetT = {
    exceptions?: DeclensionRuleT[];
    suffixes?: DeclensionRuleT[];
};
export declare function constantizeGenderInRules(rules: DeclensionRuleSetT): void;
export declare function inclineByRules(str: string, declensionStr: DeclentionT | DeclentionStrT, genderStr: GenderConstT | GenderStrT | null, ruleSet: DeclensionRuleSetT): string;
export declare function findRule(str: string, gender: GenderConstT | null, ruleSet: DeclensionRuleSetT, tags?: {
    firstWord?: boolean;
}): DeclensionRuleT | null;
export declare function findExactRule(rules: DeclensionRuleT[], gender: GenderConstT | null, matchFn: (some: string) => boolean, tags?: string[]): DeclensionRuleT | null;
export declare function applyRule(rule: DeclensionRuleT | {
    mods: DeclentionModsT;
}, str: string, declension?: DeclentionT | null): string;
export declare function applyMod(str: string, mod: string): string;
export declare function getDeclensionConst(key?: DeclentionStrT | string | null): DeclentionT | null;
export declare function getDeclensionStr(cnst: DeclentionT | string | null): DeclentionStrT | null;
//# sourceMappingURL=inclineRules.d.ts.map