"use strict";
/* eslint-disable no-use-before-define, no-continue, arrow-parens */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.incline = exports.inclineMiddlename = exports.inclineLastname = exports.inclineFirstname = void 0;
const gender_1 = require("./gender");
const inclineRules_1 = require("./inclineRules");
const inclineRulesLastname_1 = __importDefault(require("./rules/inclineRulesLastname"));
const inclineRulesMiddlename_1 = __importDefault(require("./rules/inclineRulesMiddlename"));
const inclineRulesFirstname_1 = __importDefault(require("./rules/inclineRulesFirstname"));
(0, inclineRules_1.constantizeGenderInRules)(inclineRulesLastname_1.default);
(0, inclineRules_1.constantizeGenderInRules)(inclineRulesMiddlename_1.default);
(0, inclineRules_1.constantizeGenderInRules)(inclineRulesFirstname_1.default);
function inclineFirstname(str, declension = 'accusative', gender) {
    return (0, inclineRules_1.inclineByRules)(str, declension, gender || (0, gender_1.getFG)(str), inclineRulesFirstname_1.default);
}
exports.inclineFirstname = inclineFirstname;
function inclineLastname(str, declension = 'accusative', gender) {
    return (0, inclineRules_1.inclineByRules)(str, declension, gender || (0, gender_1.getLG)(str), inclineRulesLastname_1.default);
}
exports.inclineLastname = inclineLastname;
function inclineMiddlename(str, declension = 'accusative', gender) {
    return (0, inclineRules_1.inclineByRules)(str, declension, gender || (0, gender_1.getMG)(str), inclineRulesMiddlename_1.default);
}
exports.inclineMiddlename = inclineMiddlename;
function incline(person, declension) {
    const res = {};
    const gender = (0, gender_1.getGender)(person);
    res.gender = gender;
    const { first, last, middle } = person;
    if (first) {
        res.first = inclineFirstname(first.trim(), declension, gender);
    }
    if (last) {
        res.last = inclineLastname(last.trim(), declension, gender);
    }
    if (middle) {
        res.middle = inclineMiddlename(middle.trim(), declension, gender);
    }
    return res;
}
exports.incline = incline;
//# sourceMappingURL=incline.js.map