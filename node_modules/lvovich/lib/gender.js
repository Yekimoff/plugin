"use strict";
/* eslint-disable no-use-before-define, arrow-parens */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertGenderStr = exports.getGenderConst = exports.getGenderByRule = exports.getGenderByRuleSet = exports.getGender = exports._getGender = exports.mergeGenders = exports.getMiddlenameGender = exports.getLastnameGender = exports.getFirstnameGender = exports.getMG = exports.getLG = exports.getFG = exports.ANDROGYNOUS = exports.FEMALE = exports.MALE = void 0;
const utils_1 = require("./utils");
const genderRules_1 = __importDefault(require("./rules/genderRules"));
exports.MALE = 1;
exports.FEMALE = 2;
exports.ANDROGYNOUS = 4;
function getFG(str) {
    return getGenderByRuleSet(str, genderRules_1.default.firstname);
}
exports.getFG = getFG;
function getLG(str) {
    return getGenderByRuleSet(str, genderRules_1.default.lastname);
}
exports.getLG = getLG;
function getMG(str) {
    return getGenderByRuleSet(str, genderRules_1.default.middlename);
}
exports.getMG = getMG;
function getFirstnameGender(str) {
    return convertGenderStr(getFG(str));
}
exports.getFirstnameGender = getFirstnameGender;
function getLastnameGender(str) {
    return convertGenderStr(getLG(str));
}
exports.getLastnameGender = getLastnameGender;
function getMiddlenameGender(str) {
    return convertGenderStr(getMG(str));
}
exports.getMiddlenameGender = getMiddlenameGender;
function mergeGenders(g1, g2) {
    if (g1 === exports.ANDROGYNOUS)
        return g2;
    if (g2 === exports.ANDROGYNOUS)
        return g1;
    if (g1 === g2)
        return g1;
    return null;
}
exports.mergeGenders = mergeGenders;
function _getGender(fio) {
    let result = exports.ANDROGYNOUS;
    const { middle, first, last } = fio;
    if (middle) {
        result = mergeGenders(result, getMG(middle.trim()));
    }
    if (first) {
        result = mergeGenders(result, getFG(first.trim()));
    }
    if (last) {
        const lastGender = getLG(last.trim());
        if (lastGender !== null) {
            result = mergeGenders(result, lastGender);
        }
    }
    return result;
}
exports._getGender = _getGender;
function getGender(fio) {
    return convertGenderStr(_getGender(fio));
}
exports.getGender = getGender;
function getGenderByRuleSet(name, ruleSet) {
    if (!name || !ruleSet) {
        return null;
    }
    const nameLower = name.toLowerCase();
    if (ruleSet.exceptions) {
        const gender = getGenderByRule(ruleSet.exceptions, (some) => {
            if ((0, utils_1.startsWith)(some, '-')) {
                return (0, utils_1.endsWith)(nameLower, some.substr(1));
            }
            return some === nameLower;
        });
        if (gender)
            return gender;
    }
    return ruleSet.suffixes
        ? getGenderByRule(ruleSet.suffixes, (some) => (0, utils_1.endsWith)(nameLower, some))
        : null;
}
exports.getGenderByRuleSet = getGenderByRuleSet;
function getGenderByRule(rules, matchFn) {
    const genders = Object.keys(rules).filter((genderKey) => {
        const array = rules[genderKey];
        return Array.isArray(array) && array.some(matchFn);
    });
    if (genders.length !== 1) {
        // DEBUG SEVERAL RULES
        Object.keys(rules).forEach((genderKey) => {
            const array = rules[genderKey];
            if (Array.isArray(array) && array.some(matchFn)) {
                // eslint-disable-next-line
                // console.log(genderKey, array);
            }
        });
        return null;
    }
    return getGenderConst(genders[0]);
}
exports.getGenderByRule = getGenderByRule;
function getGenderConst(key) {
    switch (key) {
        case 'male':
        case exports.MALE:
            return exports.MALE;
        case 'female':
        case exports.FEMALE:
            return exports.FEMALE;
        case 'androgynous':
        case exports.ANDROGYNOUS:
            return exports.ANDROGYNOUS;
        default:
            return null;
    }
}
exports.getGenderConst = getGenderConst;
function convertGenderStr(cnst) {
    switch (cnst) {
        case 'male':
        case exports.MALE:
            return 'male';
        case 'female':
        case exports.FEMALE:
            return 'female';
        case 'androgynous':
        case exports.ANDROGYNOUS:
            return 'androgynous';
        default:
            return null;
    }
}
exports.convertGenderStr = convertGenderStr;
//# sourceMappingURL=gender.js.map