export declare const MALE = 1;
export declare const FEMALE = 2;
export declare const ANDROGYNOUS = 4;
export declare type GenderConstT = typeof MALE | typeof FEMALE | typeof ANDROGYNOUS;
export declare type GenderStrT = 'male' | 'female' | 'androgynous';
export declare type FioT = {
    first?: string | null;
    last?: string | null;
    middle?: string | null;
};
export declare type GenderRulesT = {
    androgynous?: string[];
    female?: string[];
    male?: string[];
};
export declare type GenderRuleSetT = {
    exceptions?: GenderRulesT;
    suffixes?: GenderRulesT;
};
export declare function getFG(str: string): GenderConstT | null;
export declare function getLG(str: string): GenderConstT | null;
export declare function getMG(str: string): GenderConstT | null;
export declare function getFirstnameGender(str: string): GenderStrT | null;
export declare function getLastnameGender(str: string): GenderStrT | null;
export declare function getMiddlenameGender(str: string): GenderStrT | null;
export declare function mergeGenders(g1: GenderConstT | null, g2: GenderConstT | null): GenderConstT | null;
export declare function _getGender(fio: FioT): GenderConstT | null;
export declare function getGender(fio: FioT): GenderStrT | null;
export declare function getGenderByRuleSet(name: string, ruleSet: GenderRuleSetT): GenderConstT | null;
export declare function getGenderByRule(rules: GenderRulesT, matchFn: (some: string) => boolean): GenderConstT | null;
export declare function getGenderConst(key: string | GenderConstT | null | undefined): GenderConstT | null;
export declare function convertGenderStr(cnst: string | GenderConstT | null | undefined): GenderStrT | null;
//# sourceMappingURL=gender.d.ts.map